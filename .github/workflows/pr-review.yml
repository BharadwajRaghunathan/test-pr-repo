name: ü§ñ PR Review Agent

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - '**.py'

jobs:
  pr-review:
    name: üîç Automated Code Review
    runs-on: ubuntu-latest
    
    steps:
    - name: üì• Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: üêç Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.9'

    - name: üì¶ Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pylint flake8

    - name: üîç Advanced PR Analysis
      run: |
        echo "ü§ñ Starting Advanced PR Review Analysis..."
        
        # Get changed Python files
        CHANGED_FILES=$(git diff --name-only origin/main...HEAD | grep '\.py$' | head -10)
        
        if [ -z "$CHANGED_FILES" ]; then
          echo "No Python files changed."
          exit 0
        fi
        
        echo "üìÅ Files to analyze: $CHANGED_FILES"
        echo "üîç Running comprehensive analysis..."
        echo ""
        
        # Initialize counters
        TOTAL_ISSUES=0
        PYLINT_ISSUES=0
        FLAKE8_ISSUES=0
        
        # Create detailed analysis script
        cat > detailed_analysis.py << 'EOF'
        import subprocess
        import sys
        import json
        import os
        
        def analyze_file_detailed(filepath):
            """Detailed analysis of a Python file."""
            print(f"üîç Analyzing {filepath}...")
            issues = {"pylint": [], "flake8": []}
            
            # Pylint analysis with detailed output
            try:
                result = subprocess.run(
                    ['pylint', filepath, '--output-format=json', '--reports=no'],
                    capture_output=True, text=True, timeout=60
                )
                if result.stdout:
                    pylint_data = json.loads(result.stdout)
                    for issue in pylint_data:
                        issues["pylint"].append({
                            'line': issue.get('line', 0),
                            'type': issue.get('type', 'unknown'),
                            'message': issue.get('message', ''),
                            'symbol': issue.get('symbol', ''),
                            'message-id': issue.get('message-id', '')
                        })
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Pylint failed: {e}")
                
            # Flake8 analysis
            try:
                result = subprocess.run(
                    ['flake8', filepath, '--format=%(path)s:%(row)d:%(col)d: %(code)s %(text)s'],
                    capture_output=True, text=True, timeout=60
                )
                if result.stdout:
                    for line in result.stdout.strip().split('\n'):
                        if line and ':' in line:
                            parts = line.split(': ', 1)
                            if len(parts) == 2:
                                location, message = parts
                                row_col = location.split(':')[1:3]
                                if len(row_col) >= 2:
                                    issues["flake8"].append({
                                        'line': row_col[0],
                                        'column': row_col[1], 
                                        'message': message.strip()
                                    })
            except Exception as e:
                print(f"  ‚ö†Ô∏è  Flake8 failed: {e}")
                
            return issues
        
        def print_detailed_results(filepath, issues):
            """Print detailed analysis results."""
            pylint_count = len(issues["pylint"])
            flake8_count = len(issues["flake8"])
            total = pylint_count + flake8_count
            
            print(f"üìÑ {filepath}")
            print(f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ")
            print(f"üéØ Issues Found: {total}")
            
            if total > 15:
                risk = "üî¥ HIGH"
            elif total > 5:
                risk = "üü° MEDIUM"  
            else:
                risk = "üü¢ LOW"
            print(f"‚ö†Ô∏è  Risk Level: {risk}")
            
            if pylint_count > 0:
                print(f"\nüîç PYLINT ({pylint_count} issues):")
                for i, issue in enumerate(issues["pylint"][:5], 1):
                    line = f"Line {issue['line']}" if issue['line'] > 0 else "General"
                    print(f"  {i}. {line}: {issue['message']}")
                if pylint_count > 5:
                    print(f"  ... and {pylint_count - 5} more pylint issues")
                    
            if flake8_count > 0:
                print(f"\nüîç FLAKE8 ({flake8_count} issues):")
                for i, issue in enumerate(issues["flake8"][:5], 1):
                    print(f"  {i}. Line {issue['line']}: {issue['message']}")
                if flake8_count > 5:
                    print(f"  ... and {flake8_count - 5} more flake8 issues")
            
            print()
            return total
        
        # Main analysis
        files = sys.argv[1].split()
        total_issues = 0
        
        for filepath in files:
            if os.path.exists(filepath):
                issues = analyze_file_detailed(filepath)
                file_issues = print_detailed_results(filepath, issues)
                total_issues += file_issues
        
        # Final summary
        print("üéØ OVERALL ASSESSMENT")
        print("="*50)
        print(f"üìä Total Issues: {total_issues}")
        print(f"üìÅ Files Analyzed: {len(files)}")
        
        if total_issues > 0:
            quality_score = max(0, 100 - (total_issues * 3))
            print(f"üèÜ Quality Score: {quality_score}/100")
            
            if total_issues > 15:
                print("‚ö†Ô∏è  Risk Level: üî¥ HIGH")
            elif total_issues > 5:
                print("‚ö†Ô∏è  Risk Level: üü° MEDIUM")
            else:
                print("‚ö†Ô∏è  Risk Level: üü¢ LOW")
                
            print(f"\nüöÄ RECOMMENDATIONS:")
            print(f"‚Ä¢ Fix critical issues before merging")
            print(f"‚Ä¢ Run 'pylint <filename>' locally for details")  
            print(f"‚Ä¢ Run 'flake8 <filename>' for PEP 8 compliance")
        else:
            print("‚úÖ No issues found! Excellent code quality.")
            
        # Return exit code
        if total_issues > 10:
            print(f"\n‚ùå BLOCKING: Too many issues ({total_issues})")
            sys.exit(1)
        elif total_issues > 0:
            print(f"\n‚ö†Ô∏è  WARNING: Issues found but not blocking")
            sys.exit(0)
        else:
            print(f"\n‚úÖ SUCCESS: Clean code!")
            sys.exit(0)
        EOF
        
        # Run detailed analysis
        python detailed_analysis.py "$CHANGED_FILES"
        
        # Capture exit code
        ANALYSIS_EXIT_CODE=$?
        echo "Analysis completed with exit code: $ANALYSIS_EXIT_CODE"
        exit $ANALYSIS_EXIT_CODE

    - name: üí¨ Post Detailed Review Comment
      if: failure()
      uses: actions/github-script@v6
      with:
        script: |
          const comment = `## ü§ñ Advanced PR Review Results
          
          ‚ö†Ô∏è **Multiple code quality issues detected that should be addressed.**
          
          ### üìä Analysis Summary:
          - **Tool**: Pylint + Flake8 comprehensive analysis
          - **Scope**: Python files in this PR
          - **Result**: Issues found requiring attention
          
          ### üîç Detailed Results:
          Check the [Actions tab](${context.payload.repository.html_url}/actions/runs/${context.runId}) for comprehensive breakdown including:
          - Line-by-line issue analysis
          - Risk level assessment  
          - Quality score calculation
          - Specific recommendations
          
          ### üõ†Ô∏è Fix Instructions:
          
          **For Pylint issues:**
          \`\`\`bash
          pip install pylint
          pylint your_file.py
          \`\`\`
          
          **For Flake8/PEP8 issues:**
          \`\`\`bash
          pip install flake8  
          flake8 your_file.py
          \`\`\`
          
          **Common fixes:**
          - Add docstrings to functions and classes
          - Remove unused variables
          - Fix spacing around operators
          - Remove unreachable code
          - Follow PEP 8 style guidelines
          
          ### üéØ Next Steps:
          1. Review detailed analysis in Actions logs
          2. Fix identified issues locally
          3. Push your changes
          4. This check will re-run automatically
          
          ---
          *This detailed review was automatically generated by PR Review Agent* üöÄ
          
          **Quality Gate**: This PR has been marked for review due to code quality concerns.`;
          
          github.rest.issues.createComment({
            issue_number: context.issue.number,
            owner: context.repo.owner,
            repo: context.repo.repo,
            body: comment
          });

    - name: üìã Update Check Status
      if: always()
      uses: actions/github-script@v6
      with:
        script: |
          const conclusion = '${{ job.status }}' === 'failure' ? 'failure' : 'success';
          const summary = conclusion === 'failure' 
            ? 'Code quality issues found - see details in Actions logs'
            : 'Code quality check passed';
            
          console.log(`Setting check conclusion: ${conclusion}`);
          console.log(`Summary: ${summary}`);
